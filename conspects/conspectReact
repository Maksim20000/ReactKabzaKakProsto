            Конспект, который на остоновках
Определения слов:
    1) инкапсуляция - закрытие деталей(тоесть спрятоно внутри функции)
        сеттер - присваивает значение
        геттер - выводит



Важно в общем:

1) Bootstrap импортируем с помощью команды
    import 'bootstrap/dist/css/bootstrap.min.css';

3) NodeJS - аналог браузера

4) SPA (Single Page Aplecation ) - всего 1 HTML
    приходят только AJAX запросы

5) UI - React
   BLL - Redax
   DAL


6) window.popa = state;
    Прикольная команда для консоли, когда popa - что вводится в консоли

7) за место if и else использую switch
    
    switch(x) {
		  case 'value1':  // if (x === 'value1')
			    ...
		    [break]

		  case 'value2':  // if (x === 'value2')
		     ...
			   [break]

		  default:
		    ...
		    [break]
	}

8) Контекст
    1) так создвется
    import React from "react";
    const storeContext = React.createContext(null)
    export default storeContext

    2) Вызываем в главном файле с помощью команды
       <StoreContext.Provider value={props.store}>

    3) после обращаемся к ней с помощью команды
    <StoreContext.Consumer>
    { - эта скобочка обязательно должна быть на этой строчке без нее не будет все работать
                (store) => (
                    <MyPosts addPastChange={addPastChange}
                             addPostProfile={addPostProfile}
                             state={state}
                             dialogsElementsMap={dialogsElements}
                    />
                )
            }
    </StoreContext.Consumer>

   или

   return (
           <StoreContext.Consumer>
               {
               (store) => {
                   let state = store.getState().profilePage

                   const dialogsElements = state.postData.map((el) => <Post
                       name={el.name}
                       likesCount={el.likesCount}
                       img={el.img}
                       message={el.message}
                   />)

                   let addPastChange = (text) => {
                       let textArea = text
                       store.dispatch(updateNewPostTextActionCreater(textArea))
                   }

                   let addPostProfile = () => {
                       store.dispatch(addNewPostProfileCreater())
                   }

                   return(<MyPosts addPastChange={addPastChange}
                                   addPostProfile={addPostProfile}
                                   state={state}
                                   dialogsElementsMap={dialogsElements}/>
                   )
               }
           }
           </StoreContext.Consumer>)
 
9) метод filter - те значения которые приходят в метод filter и удовлетворяют 
	условию остаются или записываются в переменную, если не удовлетворяет условию то убирается.

   const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];
		const result = words.filter(word => word.length > 6);
		console.log(result);
		// Expected output: Array ["exuberant", "destruction", "present"]

10) метод every если хотябы 1 условие не удовлетворяет условию то выводится false
	[12, 5, 8, 130, 44].every(elem => elem >= 10);   // false
	[12, 54, 18, 130, 44].every(elem => elem >= 10); // true

11) метод some если хотя бы 1 элемент удовлетворяет условию то выводится true
	[2, 5, 8, 1, 4].some(elem => elem > 10);  // false
	[12, 5, 8, 1, 4].some(elem => elem > 10); // true

12) операторы 
			1) или result = a || b;
			2) и result = a && b;
			3) не result = !value;

























