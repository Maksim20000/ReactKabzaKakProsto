1) чтобы создать проект на реакт мы используем команду
    npx create-react-app название файла


3) два раза использовать BrouserRouter

5) action - действие которое возвращает как минимум type

6) dispatch - функция, которая возвращает action
    или
       универсальная функция для взаимодействоя с состоянием

7) в файлах где есть приписка container - можно хранить функции грязные
8) когда фигурными скобками мы создаем объект эти скобочки называются - литералы объекта

9) детерменированость или иденпатентность - когда мы отправляем data и возвращаем result

10) reduser - чистая функция, которая принимает старый state, принимает action если нужно модифицировать то действует по правилам инютабельности и возвращает
    нетронутый или измененный state

11) API - интерфейс который пользователь видитц

12) Site effect
    1) api call - главная функция не должна вызывать функцию с вызовом ajax запросов
    2) modification of oarameters
    3) change DOM directly
    4) change outer score variables - внешние переменнтые
    ...

13) Классовые компоненты нужны чтобы создавать однотипные объекты на базе этих классов и для ООП

14) callback - функция, которая передается в качестве аргумента другой функции и выполняется позже.

15) Пул-реквест это запрос на интеграцию изменений из одной ветки в другую
16) Spread оператор – это три точки перед именем переменной (или константы), внутри определения объекта

17) Оба из них создадут специальный объект истории. Вы должны использовать BrowserRouter, если у вас есть сервер, 
который отвечает на запросы, и HashRouter, если вы используете статический файловый сервер типо GithubPages

18) тернарное выражение 
    {name ? `Привет, ${name}` : 'Пожалуйста, войдите в ваш аккаунт'}

19) SOLID - это принципы разработки программного обеспечения, следуя которым 
	Вы получите хороший код, который в дальнейшем будет хорошо масштабироваться 
	и поддерживаться в рабочем состоянии

S - Single Responsibility Principle - принцип единственной ответственности. Каждый класс должен иметь только одну зону ответственности.
O - Open closed Principle - принцип открытости-закрытости. Классы должны быть открыты для расширения, но закрыты для изменения.
L - Liskov substitution Principle - принцип подстановки Барбары Лисков. Должна быть возможность вместо базового (родительского) типа (класса) подставить любой его подтип (класс-наследник), при этом работа программы не должна измениться.
I -  Interface Segregation Principle - принцип разделения интерфейсов. Данный принцип обозначает, что не нужно заставлять клиента (класс) реализовывать интерфейс, который не имеет к нему отношения.
D - Dependency Inversion Principle - принцип инверсии зависимостей. Модули верхнего уровня не должны зависеть от модулей нижнего уровня. И те, и другие должны зависеть от абстракции. Абстракции не должны зависеть от деталей. Детали должны зависеть от абстракций.
 
20) Rest - инструмент помогающий передавать json файл в бд и приниматт информацию из этой же бд,
	с помощью этого инструмента можно использовать методы post put delete get

21) Promise – это специальный объект, который содержит своё состояние. Вначале pending («ожидание»), 
			затем – одно из: fulfilled («выполнено успешно») или rejected («выполнено с ошибкой»).