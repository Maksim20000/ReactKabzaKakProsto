1) чтобы создать проект на реакт мы используем команду
    npx create-react-app название файла


3) два раза использовать BrouserRouter

5) action - действие которое возвращает как минимум type

6) dispatch - функция, которая возвращает action
    или
       универсальная функция для взаимодействоя с состоянием

7) в файлах где есть приписка container - можно хранить функции грязные
8) когда фигурными скобками мы создаем объект эти скобочки называются - литералы объекта

9) детерменированость или иденпатентность - когда мы отправляем data и возвращаем result

10) reduser - чистая функция, которая принимает старый state, принимает action если нужно модифицировать то действует по правилам инютабельности и возвращает
    нетронутый или измененный state

11) API - интерфейс который пользователь видитц

12) Site effect
    1) api call - главная функция не должна вызывать функцию с вызовом ajax запросов
    2) modification of oarameters
    3) change DOM directly
    4) change outer score variables - внешние переменнтые
    ...

13) Классовые компоненты нужны чтобы создавать однотипные объекты на базе этих классов и для ООП

14) callback - функция, которая передается в качестве аргумента другой функции и выполняется позже.

15) Пул-реквест это запрос на интеграцию изменений из одной ветки в другую
16) Spread оператор – это три точки перед именем переменной (или константы), внутри определения объекта

17) Оба из них создадут специальный объект истории. Вы должны использовать BrowserRouter, если у вас есть сервер, 
который отвечает на запросы, и HashRouter, если вы используете статический файловый сервер типо GithubPages

18) тернарное выражение 
    {name ? `Привет, ${name}` : 'Пожалуйста, войдите в ваш аккаунт'}

19) SOLID — это аббревиатура, каждая буква которой представляет один из пяти принципов проектирования, а именно:

		Принцип единственной ответственности (SRP) - каждая функция/модуль/компонент должны делать ровно одну вещь.
			разбить большие компоненты, которые делают слишком много, на более мелкие компоненты;
			выделить код, не связанный с функциональностью основного компонента, в отдельные служебные функции;
			инкапсулировать подключенную функциональность в настраиваемые хуки.
 
Принцип открытости-закрытости (OCP)
Принцип подстановки Барбары Лисков (LSP)
Принцип разделения интерфейсов (ISP)
Принцип инверсии зависимостей (DIP) 
 
20) Representational State Transfer (REST) — это программная архитектура, 
	которая определяет условия работы API. Первоначально REST создавалась 
	как руководство для управления взаимодействиями в сложной сети, такой как Интернет. 
  Архитектуру на основе REST можно использовать для поддержки высокопроизводительной 
	и надежной связи в требуемом масштабе. Ее можно легко внедрять и модифицировать, 
	обеспечивая прозрачность и кросс-платформенную переносимость любой системы API.

